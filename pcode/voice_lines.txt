1. Read Header
	Discard 0 .. 8
	Array_Entries 9 .. C
	Discard D .. F
	H1_Offset 10 .. 13 (Add 0x10)
	Discard 14 .. 1E
	H2_Offset 1F .. 22 (Add 0x10)
2. Read H1
	type H1 is record
		Hash1 : Unsigned_32 0 .. 3
		Length : Float 4 .. 7
	end record;

	Seek to H1 (+1)
	Create Array of H1s (1 .. Array_Entries)
	for E of Array loop
		E := (Unsigned_32'Read, Float'Read);
	end loop;
3. Read H2
	type H2 is record
		Hash1 : Unsigned_32; 0 .. 3
		Discard_1 : Discard_Array (4 .. 7)
		Pointer : Unsigned_32; 8 .. B
		Discard_2 : Discard_Array (C .. F)
	end record;

	Seek to H2 (+1)
	Create Array of H2s (1 .. Array_Entries)
	for E of Array loop
		H2'Read (S, E);
		E.Pointer := E.Pointer + Get_Index (F) - 8; -- Or -4, check
	end loop;

4. Read Data
	Loop over H1s
		For each H1, find corresponding H2
		Save Hash1 from H2
		Loop:
			seek to E.Pointer + 3 (exactly)
			Reference : Unsigned_32 := Unsigned_32'Read
			case Reference is
				Special_Class =>
				Array_Class =>
				Entry_Class =>
			end case;
	[Most complex part, skip detailed imp. for now]
